 1. Quelles sont les informations minimales à connaitre ou à télécharger pour pouvoir implémenter et exécuter un client
 qui interroge le serveur écrit par un autre binôme qui s’exécute sur une machine distante ?
On a besoin :
- Du nom du serveur (adresse IP)
- Du port de communication
- Du protocole de communication :
    - TCP ou UDP
    - l'encodage des données
    - le marshalling (le type de sérialisation)
    - le flux de lecture / écriture
- Le langage de programmation - la version de Java

2. Quelles sont les instructions (parties de code) qui gèrent les connexions de plusieurs clients en parallèle ?
(à implémenter si cela n’a pas été fait dans l’étape no 1)
On peut gérer les connexions de plusieurs clients en parallèle grâce à l'utilisation de threads d'une part,
et grâce à la synchornisation des données du serveur d'autre part, afin de préserver l'intégrité des données.
Ici, si on file pas tout notre code, je te propose qu'on donne le morceau de code du serveur qui concerne ça & c'est tout

3. Comment concevoir le serveur afin de pouvoir simplement réutiliser du code si on utilise UDP
comme protocole de transport ? Implémenter la communication en UDP et écrire si nécessaire le fichier
protocoleDApplicationAuDessusDeUDP.txt qui décrit les variantes sur le protocole d’application et la sérialisation.
Facultatif : Pour tous ceux qui ont fait la sérialisation chaîne posez-vous la même question avec le protocole
d'application pour une sérialisation Objet que vous avez reçu.
Réutilisation simple du serveur avec le protocle UDP :
Pour pouvoir réutiliser notre serveur en changeant seulement le protocole de transport, il faut complètement séparer le serveur du protocole de transport :
En fonction du message que le serveur reçoit (demande de communication ou datagramme(c'est comme ça qu'on dit pour les paquets udp non ?)),
la classe serveur peut instancier un objet ServeurTCP ou bien ServeurUDP.
De la même manière, en fonction du type de données que le serveur reçoit (une chaîne de caractères ou bien un objet),
le serveur peut appeler différentes méthodes de désérialisation, puis de sérialisation pour envoyer son éventuelle réponse.

Afin d'éviter les déclarations conditionnelles en cascade, on peut utiliser un factory pattern,
qui créerait les instances des différents serveurs de manière statique au chargement du programme, et la bonne instance
serait appelée lorsqu'elle est nécessaire grâce à la recherche dans une structure de stockage de ces instances.

4. Quels sont les principaux avantages et/ou inconvénients d'une communication UDP pour ce type de service ?
Pour ce type de service, la communication est beaucoup plus légère : la communication serait donc plus rapide,
pour ce petit service qui ne nécessite pas à priori beaucoup de moyens.
Egalement, la communication UDP facilite le traitement des demandes de plusieurs clients à la fois.
Cependant, sans l'assurance que les paquets sont bien reçus, lorsqu'un client fait une demande,
il est possible qu'il ne reçoive jamais de réponse, sans savoir si sa requête n'a pas pu être satisfaite ou bien si elle n'a pas été reçue.
Les demandes des clients peuvent arriver dans n'importe quel ordre : cela signifie qu'on ne peut pas considérer un usager comme prioritaire,
même si sa demande a été passée avant un autre.

D'autres à trouver !

5. Supposons que le serveur de surnoms soit un serveur très important pour l'école et que nous soyons amenés à mettre
en place des serveurs esclaves qui soient des copies de ce serveur. Pour simplifier nous utiliserons une communication
en mode multicast dans laquelle tous les serveurs esclaves sont des clients du serveur principal.
Via cette communication le serveur principal informe régulièrement (délai de temps) les serveurs esclaves de son état.

a. Quel est le protocole d'application que vous pourriez mettre en place pour cette partie ?

b. Comment faire évoluer le code du client et du serveur afin de mixer le service de Surnoms et celui de “réplicats” ?