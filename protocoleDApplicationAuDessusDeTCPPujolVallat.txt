/***************************************
 *****   PROTOCOLE D'APPLICATION   *****
 *****      AU DESSUS DE TCP       *****
 ***************************************/


/***** LISTE DES SERVICES *****/

	-> Ajouter une nouvelle personne -> implémenté
	-> Ajouter une nouvelle association nom/surnom (seulement si la personne existe déjà)
	-> Afficher les surnoms d’une personne -> implémenté
	-> Lister toutes les entrées
	-> Supprimer un surnom
	-> Supprimer une personne et tout ses surnoms
	-> Afficher seulement les étudiants, seulement les profs, seulement les 4A, etc.
	-> Modifier un surnom précis d’une personne
	-> Modifier un nom d’une personne
	-> Quitter
	-> Connecter



/***** SERIALISATION *****/

	-> Les données sont sérialisées sous forme de chaînes de caractères.
	Cette sérialisation se fait grâce à Json : le client construit un objet Requete, le sérialise puis l'envoie au serveur.

Une requête est composée d'un nom d'instruction, puis d'une liste de paramètres.
Une réponse est constituée d'une liste de chaînes de caractères.
/***** EXPRESSIONS RATIONNELLES DES MESSAGES SERIALISES *****/

	-> _REQUETE_ : _INSTRUCTION_ (_PARAMETRE_)*"\n"

	-> _INSTRUCTION_ : "AJOUTER_PERSONNE" | "AJOUTER_SURNOM" | "SUPPRIMER_SURNOM" | "SUPPRIMER_PERSONNE" 
			   | "LISTER_UN" | "LISTER_REQUETES" | "LISTER_TOUT" | "MODIFIER_NOM"
	                   | "MODIFIER_SURNOM" | "MODIFIER_APOGEE" | "MODIFIER_QUALITE" 
			   | "MODIFIER_DEPARTEMENT" | "CONNECTER" | "QUITTER"

	-> _PARAMETRE_ : chaîne_de_caractères /* cf détail des instructions ci-dessous pour plus de
 					         précisions concernant les paramètres */


	-> _NOM_ : ([A-Za-z])([A-Za-z]|-| )+ 

	-> _APOGEE_ : [0-9]⁸ /* numéro apogée attribué par l'université */

	-> _GENRE_ : "M" | "F"

	-> _QUALITE_ : "ETU"(1|2|3|4|5) | "PROF"

	-> _DEPARTEMENT_ : "SI" | "MAM" | "ELEC" | "GE" | "BAT" | "GB" | "PEIP"

	-> _SURNOM_ : chaîne_de_caractères



/***** DETAIL DES INSTRUCTIONS *****/

	-> AJOUTER_NOM :
		
		LISTE DES PARAMETRES : 
			- String Nom		/* Nom à ajouter */
			- String Prenom		/* Prénom à ajouter */
			- String Apogee		/* Numéro apogée de la personne à ajouter */
			- String donnees.Qualite	/* ETU suvi du numéro d'année pour un étudiant.
						   PROF pour un professeur. EX : ETU4 ou PROF */
			- String Departement	/* SI, MAM, ELEC, GE, BAT, GB ou PEIP */

		FONCTION :  
			Permet la création d'un nouveau nom dans la base de surnoms. Le nom alors 
			créé n'a pas de surnom associé.

		PRECONDITION :
			Aucun couple Nom/Apogee identiques ne doit être déjà enregistré.

		RETOURS :
			Nom ajouté avec succès, ou bien :
			Cas d'erreur : 
			- "ERR-SYNTAXE_APOGEE\n"
			  Le numéro apogée saisie ne respecte pas le format correct.
			- "ERR-NOM_EXISTE_DEJA "_LIST_"\n"
			  Le nom/apogee existe déjà, on retourne le nom en question présent dans la
			  base de donnée.
			- "ERR-SYNTAXE_QUALITE\n"
			  La qualité saisie ne respecte pas le format correct.
			- "ERR-DEPARTEMENT_INCONNU\n"
			  Le département saisi n'est pas correct.

	
	-> AJOUTER_SURNOM :

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom à ajouter */
			- String  Apogee	/* Numéro apogée de la personne à ajouter */
			- String  Surnom	/* Surnom à enregistrer */

		FONCTION :  
			Permet l'ajout d'un nouveau surnom associé à un nom et numéro apogée dans 
			la base de surnoms.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-AJOUTER_SURNOM#"_LIST_"#\n"
		 	  On retourne les données concernant le nom auquel un surnom à été ajouté 
			  avec sa liste de surnoms (le dernier étant 
			  le plus récemment ajouté).
			
			- "ERR-NOM_INCONNU##\n"
			  Aucun couple Nom/Apogee ne correspond dans la base de données. On retourne
			  uniquement le message d'erreur.

	-> SUPPRIMER_SURNOM : 

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom */
			- String  Apogee	/* Numéro apogée de la personne à ajouter */
			- String  Surnom	/* Surnom à supprimer */

		FONCTION :  
			Permet la suppression d'un surnom précédemment enregistré dans la base de
			données.

		PRECONDITION :
			Le couple Nom/Apogee et le surnom doivent exister dans la base de données.

		RETOUR : 
			- "OOK-SUPPRIMER_SURNOM#"_LIST_"#\n"
		 	  On retourne les données concernant le nom auquel le surnom à été supprimé
			  avec sa liste de surnoms restants.
			
			- "ERR-NOM_INCONNU##\n"
			  Aucun couple Nom/Apogee doit ne correspond dans la base de données. On
			  retourne uniquement le message d'erreur.
			- "ERR-SURNOM_INCONNU#_LIST_#\n"
			  Aucun surnom ne correspond pour ce nom dans la base de données. On retourne
			  les données concernant le nom concerné avec la liste de ses surnoms.

	
	-> SUPPRIMER_NOM : 

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom à supprimer */
			- String  Apogee	/* Numéro apogée de la personne à supprimer */

		FONCTION :  
			Permet la suppression d'un nom de la base de donnée. Toutes les 
			informations le concernant seront radiés.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-SUPPRIMER_NOM#\n"
			
			- "ERR-NOM_INCONNU##\n"
			  Aucun couple Nom/Apogee doit ne correspond dans la base de données. On
			  retourne uniquement le message d'erreur.


	-> LISTER_UN :

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom à lister */
			- String  Apogee	/* Numéro apogée de la personne à lister */

		FONCTION :  
			Permet de lister tous les surnoms associés à un nom de la base de donnée.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-LISTER_UN#"_LIST_"#\n"
		 	  On retourne les données concernant le nom à lister.
			
			- "ERR-NOM_INCONNU##\n"
			  Aucun couple Nom/Apogee doit ne correspond dans la base de données. On
			  retourne uniquement le message d'erreur.
 
 
	-> LISTER_REQUETES : 

		LISTE DES PARAMETRES : 
			- String  Filtre	/* Filtre utilisé pour trier certains éléments : 							   DEPARTEMENT, ANNEE, GENRE, QUALITE, SURNOM */

		FONCTION :  
			Permet de lister tous les noms (avec leurs surnoms) remplissant les 
			conditions du filtre dans la base de donnée.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-LISTER_REQUETES#"_LIST_"#\n"
		 	  On retourne les données comportant le filtre dans la base de données.
			
			- "ERR-FILTRE_INCONNU##\n"
			  Le filtre utilisé est inconnu. On retourne uniquement le message d'erreur.
 

	-> LISTER_TOUT :

		LISTE DES PARAMETRES :
			Aucun paramètre

		FONCTION :  
			Permet de lister tous les noms (avec leurs surnoms) de la base de données.

		PRECONDITION :
			Aucune.

		RETOUR : 
			- "OOK-LISTER_TOUT#"_LIST_"#\n"
		 	  On retourne toutes les données de la base de surnoms.


	-> MODIFIER_NOM : 

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom à modifier */
			- String  Apogee	/* Numéro apogée de la personne à modifier */
			- String  NouveauNom	/* Nom modifié */

		FONCTION :  
			Permet de modifier un nom dans la base de donnée.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-MODIFIER_NOM#"_LIST_"#\n"
		 	  On retourne les données du nom modifié dans la base de données.
			
			- "ERR-NOM_INCONNU#\n"
			  Le couple Nom/Apogee utilisé est inconnu. On retourne uniquement le 
			  message d'erreur.

	-> MODIFIER_SURNOM :

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom */
			- String  Apogee	/* Numéro apogée de la personne à modifier */
			- String  Surnom	/* Surnom à modifier */
			- String  NouveauSurnom	/* Surnom modifié */

		FONCTION :  
			Permet de modifier un surnom dans la base de données.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-MODIFIER_SURNOM#"_LIST_"#\n"
		 	  On retourne les données du nom modifié dans la base de donnée.
			
			- "ERR-NOM_INCONNU#\n"
			  Le couple Nom/Apogee utilisé est inconnu. On retourne uniquement le 
			  message d'erreur.

			- "ERR-SURNOM_INCONNU#\n"
			  Le surnom est inconnu. On retourne uniquement le message d'erreur.


	-> MODIFIER_APOGEE :

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom */
			- String  Apogee	/* Numéro apogée à modifier */
			- String  NouveauApogee	/* Apogee modifié */

		FONCTION :  
			Permet de modifier un numéro apogée dans la base de données.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-MODIFIER_APOGEE#"_LIST_"#\n"
		 	  On retourne les données du nom modifié dans la base de donnée.

			- "ERR-SYNTAXE_APOGEE##\n"
			  Le numéro apogée saisi ne respecte pas le format correct.			
			- "ERR-NOM_INCONNU#\n"
			  Le couple Nom/Apogee utilisé est inconnu. On retourne uniquement le 
			  message d'erreur.


	-> MODIFIER_QUALITE :

		LISTE DES PARAMETRES : 
			- String  Nom		/* Nom */
			- String  Apogee	/* Numéro apogée de la personne à modifier */
			- String  NouvQualite	/* Qualité modifiée */

		FONCTION :  
			Permet de modifier la qualité d'une personne dans la base de données.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-MODIFIER_QUALITE#"_LIST_"#\n"
		 	  On retourne les données du nom modifié dans la base de donnée.
			
			- "ERR-NOM_INCONNU#\n"
			  Le couple Nom/Apogee utilisé est inconnu. On retourne uniquement le 
			  message d'erreur.
			- "ERR-SYNTAXE_QUALITE#\n"
			  La qualité saisie ne respecte pas le format correct.


	-> MODIFIER_DEPARTEMENT :

		LISTE DES PARAMETRES : 
			- String  Nom			/* Nom */
			- String  Apogee		/* Numéro apogée de la personne à modifier */
			- String  NouveauDpt	/* Département modifié */

		FONCTION :  
			Permet de modifier le département d'une personne dans la base de données.

		PRECONDITION :
			Le couple Nom/Apogee doit exister dans la base de données.

		RETOUR : 
			- "OOK-MODIFIER_DEPARTEMENT#"_LIST_"#\n"
		 	  On retourne les données du nom modifié dans la base de données.
			
			- "ERR-NOM_INCONNU#\n"
			  Le couple Nom/Apogee utilisé est inconnu. On retourne uniquement le 
			  message d'erreur.
			- "ERR-DEPARTEMENT_INCONNU#\n"
			  Le département saisi n'est pas correct.


	-> CONNECTER : 
			La connexion se fait avec le protocole TCP. La demande de connexion se fait donc avec le nom du serveur, et le numéro de port utilisé pour la communication : 
nom du serveur : IP à définir. 
port : 4444

	-> QUITTER : 

			La déconnexion se fait avec le protocole TCP 




